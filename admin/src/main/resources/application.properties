server.port=9091

# session最大超时时间(分钟)，默认为30
server.session-timeout=30
# 数据库访问配置
# 主数据源，默认的
#数据源
spring.datasource.url=jdbc:mysql://localhost:3306/demo_test
spring.datasource.username= root
spring.datasource.password= 123456
spring.datasource.driverClassName = com.mysql.jdbc.Driver

debug=true
#阿里连接池
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource

# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
# 配置获取连接等待超时的时间
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
spring.datasource.useGlobalDataSourceStat=true

#JPA Configuration:
spring.jpa.database=MYSQL
# Show or not log for each sql query
spring.jpa.show-sql=false
spring.jpa.generate-ddl=true  
# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect
spring.jpa.hibernate.naming_strategy=org.hibernate.cfg.ImprovedNamingStrategy
#spring.jpa.database=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect

#spring.data.elasticsearch.properties.host = 127.0.0.1
#spring.data.elasticsearch.properties.port = 9300

# http文件大小限制
spring.http.multipart.maxFileSize=10Mb
spring.http.multipart.maxRequestSize=10Mb

########################################################
###REDIS (RedisProperties) redis基本配置；
########################################################
## Redis 配置
## Redis数据库索引（默认为0）
#spring.redis.database=0
### Redis服务器地址
#spring.redis.host=127.0.0.1
### Redis服务器连接端口
#spring.redis.port=6379
### Redis服务器连接密码（默认为空）
#spring.redis.password=
### 连接池最大连接数（使用负值表示没有限制）
#spring.redis.pool.max-active=8
### 连接池最大阻塞等待时间（使用负值表示没有限制）
#spring.redis.pool.max-wait=-1
### 连接池中的最大空闲连接
#spring.redis.pool.max-idle=8
### 连接池中的最小空闲连接
#spring.redis.pool.min-idle=0
### 连接超时时间（毫秒）
#spring.redis.timeout=0
#
####指定缓存为Redis
#spring.cache.type=Redis

#spring.mvc.view.prefix=classpath:/templates/
#spring.mvc.view.suffix=.html
#spring.mvc.date-format=yyyy-MM-dd HH:mm:ss
#spring.resources.static-locations=classpath:/resources/,classpath:/static/

###模板配置
spring.thymeleaf.mode = HTML5
spring.thymeleaf.cache = false
spring.thymeleaf.encoding = UTF-8
spring.thymeleaf.content-type = text/html

### quartz
#调度标识名 集群中每一个实例都必须使用相同的名称
quartz.scheduler.instanceName = MyScheduler
#线程数量
quartz.threadPool.threadCount = 50
#线程优先级
quartz.threadPool.threadPriority = 5
##表的前缀
#quartz.jobStore.tablePrefix = QRTZ_
##库的别名
#quartz.jobStore.dataSource = myDS
# Cluster开启集群
quartz.jobStore.isClustered = true
#ID设置为自动获取 每一个必须不同
quartz.scheduler.instanceId = AUTO
quartz.dataSource.myDS.maxConnections = 5